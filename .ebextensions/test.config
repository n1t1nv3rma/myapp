files:
    "/etc/security/limits.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
        * hard nofile  64000
        * soft nofile  64000

Resources:
    AWSEBAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn:
            - 'AWSEBLoadBalancer'
            - 'AWSEBAutoScalingLaunchConfiguration'
        Properties:
            AvailabilityZones: { "Fn::GetAZs" : "" }
            DesiredCapacity: '1'
            HealthCheckGracePeriod: '600'
            HealthCheckType: 'ELB'
            LaunchConfigurationName: { "Ref": "AWSEBAutoScalingLaunchConfiguration" }
            LoadBalancerNames: { "Ref": "AWSEBLoadBalancer" }
            MaxSize: '2'
            MinSize: '1'
    AWSEBAutoScalingLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: 'ami-cf2855f5'
            InstanceType: 't1.micro'
    ScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        DependsOn: 'AWSEBAutoScalingGroup'
        Properties:
            AdjustmentType: 'ChangeInCapacity'
            AutoScalingGroupName: { "Ref": "AWSEBAutoScalingGroup" }
            Cooldown: '360'
            ScalingAdjustment: '1'
    ScaleDownPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        DependsOn: 'AWSEBAutoScalingGroup'
        Properties:
            AdjustmentType: 'ChangeInCapacity'
            AutoScalingGroupName: { "Ref": "AWSEBAutoScalingGroup" }
            Cooldown: '360'
            ScalingAdjustment: '-1'
    AWSEBLoadBalancer:
        Type: AWS::ElasticLoadBalancing::LoadBalancer
        Properties:
            ConnectionDrainingPolicy: { Enabled: true, Timeout: '20' }
            CrossZone: 'true'
            HealthCheck: { HealthyThreshold: '2', Interval: '15', Target: 'TCP:80', Timeout: '10', UnhealthyThreshold: '6' }
            LoadBalancerName: 'donde-dev-appsrv-elb'
            Listeners:
                - { LoadBalancerPort: '80', InstancePort: '80', Protocol: 'HTTP', InstanceProtocol: 'HTTP' }
            Scheme: 'public'
    CPUAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        DependsOn:
            - 'ScaleUpPolicy'
            - 'AWSEBAutoScalingGroup'
        Properties:
            AlarmActions:
                - { "Ref": "ScaleUpPolicy" }
            AlarmDescription: 'Scale-up if Avg CPU Utilization is greater than 60% for 5 consecutive minutes'
            ComparisonOperator: 'GreaterThanThreshold'
            Dimensions:
                - { "Name": "AutoScalingGroupName", "Value": { "Ref": "AWSEBAutoScalingGroup" } }
            EvaluationPeriods: '5'
            MetricName: 'CPUUtilization'
            Namespace: 'AWS/EC2'
            Statistic: 'Average'
            Period: '60'
            Threshold: '60'
    CPUAlarmLow:
        Type: AWS::CloudWatch::Alarm
        DependsOn:
            - 'ScaleDownPolicy'
            - 'AWSEBAutoScalingGroup'
        Properties:
            AlarmActions:
                - { "Ref": "ScaleDownPolicy" }
            AlarmDescription: 'Scale-down if Avg CPU Utilization is less than 20% for 5 consecutive minutes'
            ComparisonOperator: 'LessThanThreshold'
            Dimensions:
                - { "Name": "AutoScalingGroupName", "Value": { "Ref": "AWSEBAutoScalingGroup" } }
            EvaluationPeriods: '5'
            MetricName: 'CPUUtilization'
            Namespace: 'AWS/EC2'
            Statistic: 'Average'
            Period: '60'
            Threshold: '20'

